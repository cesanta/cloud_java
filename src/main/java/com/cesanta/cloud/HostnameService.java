
package com.cesanta.cloud;

// GENERATED FILE DO NOT EDIT
// This file is automatically generated with clubbygen.

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import com.cesanta.clubby.lib.Clubby;
import com.cesanta.clubby.lib.CmdListener;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Hostname service allows to control mapping between hostnames and blobstore key prefixes used as web-server root directories.
 */
public final class HostnameService {

    private final Clubby clubby;

    public static HostnameService createInstance(Clubby clubby) {
        return new HostnameService(clubby);
    }

    private HostnameService(Clubby clubby) {
        this.clubby = clubby;
    }


    //-- Add {{{

    /**
     * Adds new hostname to the database.
     */
    public void add(
            HostnameService.AddArgs args,
            CmdListener<HostnameService.AddResponse> listener
            ) {
        clubby.callBackend(
                "/v1/Hostname.Add",
                args,
                listener,
                HostnameService.AddResponse.class
                );
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.HostnameService#add add} method.
     */
    public static final class AddArgs  {

        /**
         * Hostname.
         */
        @JsonProperty("hostname")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String hostname;

        /**
         * ID of the project this hostname belongs to. Caller must have access to this project.
         */
        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String projectid;

        /**
         * Blobstore key prefix. First component must be the same as `projectid`.
         */
        @JsonProperty("root")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private List<String> root = new ArrayList<String>();


        /**
         * Set hostname.
         */
        public AddArgs hostname(String hostname) {
            this.hostname = hostname;
            return this;
        }

        /**
         * Set ID of the project this hostname belongs to. Caller must have access to this project.
         */
        public AddArgs projectid(String projectid) {
            this.projectid = projectid;
            return this;
        }

        /**
         * Add an item to the blobstore key prefix. First component must be the same as `projectid`.
         */
        public AddArgs root(String root) {
            this.root.add(root);
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.HostnameService#add add} method.
     */
    public static final class AddResponse  {


    }


    // }}}

    // }}}

    //-- Delete {{{

    /**
     * Deletes the hostname from the database.
     */
    public void delete(
            HostnameService.DeleteArgs args,
            CmdListener<HostnameService.DeleteResponse> listener
            ) {
        clubby.callBackend(
                "/v1/Hostname.Delete",
                args,
                listener,
                HostnameService.DeleteResponse.class
                );
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.HostnameService#delete delete} method.
     */
    public static final class DeleteArgs  {

        /**
         * Hostname.
         */
        @JsonProperty("hostname")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String hostname;


        /**
         * Set hostname.
         */
        public DeleteArgs hostname(String hostname) {
            this.hostname = hostname;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.HostnameService#delete delete} method.
     */
    public static final class DeleteResponse  {


    }


    // }}}

    // }}}

    //-- Get {{{

    /**
     * Returns info about the hostname.
     */
    public void get(
            HostnameService.GetArgs args,
            CmdListener<HostnameService.GetResponse> listener
            ) {
        clubby.callBackend(
                "/v1/Hostname.Get",
                args,
                listener,
                HostnameService.GetResponse.class
                );
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.HostnameService#get get} method.
     */
    public static final class GetArgs  {

        /**
         * Hostname.
         */
        @JsonProperty("hostname")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String hostname;


        /**
         * Set hostname.
         */
        public GetArgs hostname(String hostname) {
            this.hostname = hostname;
            return this;
        }

    }


    // }}}

    //-- response {{{

    public static final class GetResponse  {

        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String projectid;

        @JsonProperty("root")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public List<String> root;


    }


    // }}}

    // }}}

    //-- Update {{{

    /**
     * Changes the root blobstore prefix.
     */
    public void update(
            HostnameService.UpdateArgs args,
            CmdListener<HostnameService.UpdateResponse> listener
            ) {
        clubby.callBackend(
                "/v1/Hostname.Update",
                args,
                listener,
                HostnameService.UpdateResponse.class
                );
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.HostnameService#update update} method.
     */
    public static final class UpdateArgs  {

        /**
         * Hostname.
         */
        @JsonProperty("hostname")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String hostname;

        /**
         * New blobstore key prefix. First component must match the ID of the project this hostname belongs to.
         */
        @JsonProperty("root")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private List<String> root = new ArrayList<String>();


        /**
         * Set hostname.
         */
        public UpdateArgs hostname(String hostname) {
            this.hostname = hostname;
            return this;
        }

        /**
         * Add an item to the new blobstore key prefix. First component must match the ID of the project this hostname belongs to.
         */
        public UpdateArgs root(String root) {
            this.root.add(root);
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.HostnameService#update update} method.
     */
    public static final class UpdateResponse  {


    }


    // }}}

    // }}}


}

