// This is a generated file. Not intended for manual editing.
//
// GENERATED FILE DO NOT EDIT
// This file is automatically generated with miot clubbygen.
//
//
// Copyright (c) 2016 Cesanta Software Limited
// All rights reserved
//

package com.cesanta.cloud;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import com.cesanta.clubby.lib.Clubby;
import com.cesanta.clubby.lib.ClubbyOptions;
import com.cesanta.clubby.lib.CmdListener;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SWUpdate service provides a way to update device's software.
 */
public final class SWUpdateService {

    private final Clubby clubby;
    private ClubbyOptions defaultOpts;

    public static SWUpdateService createInstance(Clubby clubby) {
        return new SWUpdateService(clubby);
    }

    private SWUpdateService(Clubby clubby) {
        this.clubby = clubby;
        this.defaultOpts = clubby.getOptions();
    }


    //-- ListSections {{{

    /**
     * Returns a list of components of the device's software. Each section is updated individually.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      SWUpdateService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void listSections(
            SWUpdateService.ListSectionsArgs args,
            CmdListener<SWUpdateService.ListSectionsResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/SWUpdate.ListSections",
                args,
                listener,
                SWUpdateService.ListSectionsResponse.class,
                opts
                );
    }

    /**
     * Returns a list of components of the device's software. Each section is updated individually.
     */
    public void listSections(
            SWUpdateService.ListSectionsArgs args,
            CmdListener<SWUpdateService.ListSectionsResponse> listener
            ) {
        listSections(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.SWUpdateService#listSections listSections} method.
     */
    public static final class ListSectionsArgs  {


    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.SWUpdateService#listSections listSections} method.
     */
    public static final class ListSectionsResponse extends ArrayList<ListSectionsResponseItem> {

        static final long serialVersionUID = 1;


    }


    public static final class ListSectionsResponseItem  {

        @JsonProperty("section")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String section;

        @JsonProperty("version")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String version;

        @JsonProperty("writable")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Boolean writable;


    }


    // }}}

    // }}}

    //-- Update {{{

    /**
     * Instructs the device to update a given section.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      SWUpdateService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void update(
            SWUpdateService.UpdateArgs args,
            CmdListener<SWUpdateService.UpdateResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/SWUpdate.Update",
                args,
                listener,
                SWUpdateService.UpdateResponse.class,
                opts
                );
    }

    /**
     * Instructs the device to update a given section.
     */
    public void update(
            SWUpdateService.UpdateArgs args,
            CmdListener<SWUpdateService.UpdateResponse> listener
            ) {
        update(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.SWUpdateService#update update} method.
     */
    public static final class UpdateArgs  {

        /**
         * Image as a string, if appropriate.
         */
        @JsonProperty("blob")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String blob;

        /**
         * type of the blob. Valid values: manifest, zip
         */
        @JsonProperty("blob_type")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String blob_type;

        /**
         * URL pointing to the image if it's too big to fit in the `blob`.
         */
        @JsonProperty("blob_url")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String blob_url;

        /**
         * Name of the section to update.
         */
        @JsonProperty("section")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String section;

        /**
         * Hash or signature for the image that can be used to verify its integrity.
         */
        @JsonProperty("sig")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private UpdateArgsSig sig = new UpdateArgsSig();

        /**
         * Optional version of the new image.
         */
        @JsonProperty("version")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String version;


        /**
         * Set image as a string, if appropriate.
         */
        public UpdateArgs blob(String blob) {
            this.blob = blob;
            return this;
        }

        /**
         * Set type of the blob. Valid values: manifest, zip
         */
        public UpdateArgs blob_type(String blob_type) {
            this.blob_type = blob_type;
            return this;
        }

        /**
         * Set URL pointing to the image if it's too big to fit in the `blob`.
         */
        public UpdateArgs blob_url(String blob_url) {
            this.blob_url = blob_url;
            return this;
        }

        /**
         * Set name of the section to update.
         */
        public UpdateArgs section(String section) {
            this.section = section;
            return this;
        }

        /**
         * Set hash or signature for the image that can be used to verify its integrity.
         */
        public UpdateArgs sig(UpdateArgsSig sig) {
            this.sig = sig;
            return this;
        }

        /**
         * Set optional version of the new image.
         */
        public UpdateArgs version(String version) {
            this.version = version;
            return this;
        }

    }


    public static final class UpdateArgsSig  {

        @JsonProperty("alg")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String alg;

        @JsonProperty("v")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String v;


        /**
         * Set alg
         */
        public UpdateArgsSig alg(String alg) {
            this.alg = alg;
            return this;
        }

        /**
         * Set v
         */
        public UpdateArgsSig v(String v) {
            this.v = v;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.SWUpdateService#update update} method.
     */
    public static final class UpdateResponse  {


    }


    // }}}

    // }}}


    public void setDefaultOptions(ClubbyOptions opts) {
        this.defaultOpts = ClubbyOptions.createFrom(opts);
    }

    public ClubbyOptions getOptions() {
        return ClubbyOptions.createFrom(defaultOpts);
    }
}

