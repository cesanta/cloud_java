// This is a generated file. Not intended for manual editing.
//
// This file is automatically generated with miot clubbygen.
//
// Copyright (c) 2016 Cesanta Software Limited
// All rights reserved
//

package com.cesanta.cloud;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import com.cesanta.clubby.lib.Clubby;
import com.cesanta.clubby.lib.ClubbyOptions;
import com.cesanta.clubby.lib.CmdListener;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Provides methods to manage projects.
 */
public final class ProjectService {

    private final Clubby clubby;
    private ClubbyOptions defaultOpts;

    public static ProjectService createInstance(Clubby clubby) {
        return new ProjectService(clubby);
    }

    private ProjectService(Clubby clubby) {
        this.clubby = clubby;
        this.defaultOpts = clubby.getOptions();
    }


    //-- CheckAccess {{{

    /**
     * Checks if a given user has a specified level of access to a given project.

     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      ProjectService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void checkAccess(
            ProjectService.CheckAccessArgs args,
            CmdListener<Boolean> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Project.CheckAccess",
                args,
                listener,
                Boolean.class,
                opts
                );
    }

    /**
     * Checks if a given user has a specified level of access to a given project.

     */
    public void checkAccess(
            ProjectService.CheckAccessArgs args,
            CmdListener<Boolean> listener
            ) {
        checkAccess(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.ProjectService#checkAccess checkAccess} method.
     */
    public static final class CheckAccessArgs  {

        /**
         * Access level you want to confirm.
         */
        @JsonProperty("level")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private Long level;

        /**
         * ID of the project.
         */
        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String projectid;

        /**
         * ID of the user.
         */
        @JsonProperty("userid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String userid;


        /**
         * Set access level you want to confirm.
         */
        public CheckAccessArgs level(long level) {
            this.level = level;
            return this;
        }

        /**
         * Set ID of the project.
         */
        public CheckAccessArgs projectid(String projectid) {
            this.projectid = projectid;
            return this;
        }

        /**
         * Set ID of the user.
         */
        public CheckAccessArgs userid(String userid) {
            this.userid = userid;
            return this;
        }

    }


    // }}}

    //-- response {{{

    // }}}

    // }}}

    //-- Create {{{

    /**
     * Creates a new project.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      ProjectService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void create(
            ProjectService.CreateArgs args,
            CmdListener<String> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Project.Create",
                args,
                listener,
                String.class,
                opts
                );
    }

    /**
     * Creates a new project.
     */
    public void create(
            ProjectService.CreateArgs args,
            CmdListener<String> listener
            ) {
        create(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.ProjectService#create create} method.
     */
    public static final class CreateArgs  {

        /**
         * Hardware architecture; valid values are: esp8266, cc3200
         */
        @JsonProperty("arch")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String arch;

        /**
         * Unique name of the project to clone from, in a format "owner/project-name".
         */
        @JsonProperty("cloneFrom")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String cloneFrom;

        /**
         * Unique name. The format is owner/project-name, only alphanumerical characters, dashes and underscores are allowed Will be prefixed with the owner account name. If the owner prefix is present, this method will check whether it matches the one specified via the owner argument.
         */
        @JsonProperty("name")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String name;

        /**
         * ID of the owner for the new project. Set to ID of the caller by default.
         */
        @JsonProperty("owner")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String owner;

        /**
         * Human-readable name for the project.
         */
        @JsonProperty("summary")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String summary;

        /**
         * Optional skeleton template
         */
        @JsonProperty("template")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String template;


        /**
         * Set hardware architecture; valid values are: esp8266, cc3200
         */
        public CreateArgs arch(String arch) {
            this.arch = arch;
            return this;
        }

        /**
         * Set unique name of the project to clone from, in a format "owner/project-name".
         */
        public CreateArgs cloneFrom(String cloneFrom) {
            this.cloneFrom = cloneFrom;
            return this;
        }

        /**
         * Set unique name. The format is owner/project-name, only alphanumerical characters, dashes and underscores are allowed Will be prefixed with the owner account name. If the owner prefix is present, this method will check whether it matches the one specified via the owner argument.
         */
        public CreateArgs name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Set ID of the owner for the new project. Set to ID of the caller by default.
         */
        public CreateArgs owner(String owner) {
            this.owner = owner;
            return this;
        }

        /**
         * Set human-readable name for the project.
         */
        public CreateArgs summary(String summary) {
            this.summary = summary;
            return this;
        }

        /**
         * Set optional skeleton template
         */
        public CreateArgs template(String template) {
            this.template = template;
            return this;
        }

    }


    // }}}

    //-- response {{{

    // }}}

    // }}}

    //-- Delete {{{

    /**
     * Deletes a project.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      ProjectService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void delete(
            ProjectService.DeleteArgs args,
            CmdListener<ProjectService.DeleteResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Project.Delete",
                args,
                listener,
                ProjectService.DeleteResponse.class,
                opts
                );
    }

    /**
     * Deletes a project.
     */
    public void delete(
            ProjectService.DeleteArgs args,
            CmdListener<ProjectService.DeleteResponse> listener
            ) {
        delete(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.ProjectService#delete delete} method.
     */
    public static final class DeleteArgs  {

        /**
         * ID of the project to be deleted.
         */
        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String id;


        /**
         * Set ID of the project to be deleted.
         */
        public DeleteArgs id(String id) {
            this.id = id;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.ProjectService#delete delete} method.
     */
    public static final class DeleteResponse  {


    }


    // }}}

    // }}}

    //-- Get {{{

    /**
     * Returns project info for a given project.
If id is given, it is used. Otherwise, name is used. Otherwise, it's an error.

     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      ProjectService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void get(
            ProjectService.GetArgs args,
            CmdListener<ProjectService.GetResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Project.Get",
                args,
                listener,
                ProjectService.GetResponse.class,
                opts
                );
    }

    /**
     * Returns project info for a given project.
If id is given, it is used. Otherwise, name is used. Otherwise, it's an error.

     */
    public void get(
            ProjectService.GetArgs args,
            CmdListener<ProjectService.GetResponse> listener
            ) {
        get(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.ProjectService#get get} method.
     */
    public static final class GetArgs  {

        /**
         * ID of the project to be retreived
         */
        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String id;

        /**
         * Name of the project to be retreived
         */
        @JsonProperty("name")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String name;


        /**
         * Set ID of the project to be retreived
         */
        public GetArgs id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Set name of the project to be retreived
         */
        public GetArgs name(String name) {
            this.name = name;
            return this;
        }

    }


    // }}}

    //-- response {{{

    public static final class GetResponse  {

        @JsonProperty("forksCount")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Double forksCount;

        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String id;

        @JsonProperty("name")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String name;


    }


    // }}}

    // }}}

    //-- GrantAccess {{{

    /**
     * Sets access level to the project for the user.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      ProjectService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void grantAccess(
            ProjectService.GrantAccessArgs args,
            CmdListener<ProjectService.GrantAccessResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Project.GrantAccess",
                args,
                listener,
                ProjectService.GrantAccessResponse.class,
                opts
                );
    }

    /**
     * Sets access level to the project for the user.
     */
    public void grantAccess(
            ProjectService.GrantAccessArgs args,
            CmdListener<ProjectService.GrantAccessResponse> listener
            ) {
        grantAccess(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.ProjectService#grantAccess grantAccess} method.
     */
    public static final class GrantAccessArgs  {

        /**
         * Access level. Currently defined levels are: 0 - no access, 10 - read access (e.g. can list devices, but not modify anything), 20 - write access (e.g. can add devices, upload firmware images, create rollouts), 30 - manage access (can grant and revoke privileges for other users).
         */
        @JsonProperty("level")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private Long level;

        /**
         * ID of the project.
         */
        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String projectid;

        /**
         * ID of the user.
         */
        @JsonProperty("userid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String userid;


        /**
         * Set access level. Currently defined levels are: 0 - no access, 10 - read access (e.g. can list devices, but not modify anything), 20 - write access (e.g. can add devices, upload firmware images, create rollouts), 30 - manage access (can grant and revoke privileges for other users).
         */
        public GrantAccessArgs level(long level) {
            this.level = level;
            return this;
        }

        /**
         * Set ID of the project.
         */
        public GrantAccessArgs projectid(String projectid) {
            this.projectid = projectid;
            return this;
        }

        /**
         * Set ID of the user.
         */
        public GrantAccessArgs userid(String userid) {
            this.userid = userid;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.ProjectService#grantAccess grantAccess} method.
     */
    public static final class GrantAccessResponse  {


    }


    // }}}

    // }}}

    //-- List {{{

    /**
     * Returns a list of projects the caller has access to.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      ProjectService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void list(
            ProjectService.ListArgs args,
            CmdListener<ProjectService.ListResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Project.List",
                args,
                listener,
                ProjectService.ListResponse.class,
                opts
                );
    }

    /**
     * Returns a list of projects the caller has access to.
     */
    public void list(
            ProjectService.ListArgs args,
            CmdListener<ProjectService.ListResponse> listener
            ) {
        list(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.ProjectService#list list} method.
     */
    public static final class ListArgs  {

        @JsonProperty("filter")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private ListArgsFilter filter = new ListArgsFilter();


        /**
         * Set filter
         */
        public ListArgs filter(ListArgsFilter filter) {
            this.filter = filter;
            return this;
        }

    }


    public static final class ListArgsFilter  {

        /**
         * If set to true, all publicly-accessible projects will be returned
         */
        @JsonProperty("public")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private Boolean public_;


        /**
         * Set if set to true, all publicly-accessible projects will be returned
         */
        public ListArgsFilter public_(boolean public_) {
            this.public_ = public_;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.ProjectService#list list} method.
     */
    public static final class ListResponse extends ArrayList<ListResponseItem> {

        static final long serialVersionUID = 1;


    }


    public static final class ListResponseItem  {

        /**
         * Number of forks of this project
         */
        @JsonProperty("forksCount")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Double forksCount;

        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String id;

        /**
         * Unique machine friendly but human readable name, like a github repository name. The name is prefixed by the owner account name (user or organization).
         */
        @JsonProperty("name")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String name;

        /**
         * descriptive short name
         */
        @JsonProperty("summary")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String summary;


    }


    // }}}

    // }}}

    //-- RevokeAccess {{{

    /**
     * Revokes access to the project for a given user.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      ProjectService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void revokeAccess(
            ProjectService.RevokeAccessArgs args,
            CmdListener<ProjectService.RevokeAccessResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Project.RevokeAccess",
                args,
                listener,
                ProjectService.RevokeAccessResponse.class,
                opts
                );
    }

    /**
     * Revokes access to the project for a given user.
     */
    public void revokeAccess(
            ProjectService.RevokeAccessArgs args,
            CmdListener<ProjectService.RevokeAccessResponse> listener
            ) {
        revokeAccess(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.ProjectService#revokeAccess revokeAccess} method.
     */
    public static final class RevokeAccessArgs  {

        /**
         * ID of the project.
         */
        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String projectid;

        /**
         * ID of the user.
         */
        @JsonProperty("userid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String userid;


        /**
         * Set ID of the project.
         */
        public RevokeAccessArgs projectid(String projectid) {
            this.projectid = projectid;
            return this;
        }

        /**
         * Set ID of the user.
         */
        public RevokeAccessArgs userid(String userid) {
            this.userid = userid;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.ProjectService#revokeAccess revokeAccess} method.
     */
    public static final class RevokeAccessResponse  {


    }


    // }}}

    // }}}


    public void setDefaultOptions(ClubbyOptions opts) {
        this.defaultOpts = ClubbyOptions.createFrom(opts);
    }

    public ClubbyOptions getOptions() {
        return ClubbyOptions.createFrom(defaultOpts);
    }
}

