/*
 * GENERATED FILE DO NOT EDIT
 * This file is automatically generated with clubbygen.
 *
 * Copyright (c) 2016 Cesanta Software Limited
 * All rights reserved
 */

package com.cesanta.cloud;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import com.cesanta.clubby.lib.Clubby;
import com.cesanta.clubby.lib.ClubbyOptions;
import com.cesanta.clubby.lib.CmdListener;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Commands provided by the dispatcher on the cloud backend.
 */
public final class DispatcherService {

    private final Clubby clubby;
    private ClubbyOptions defaultOpts;

    public static DispatcherService createInstance(Clubby clubby) {
        return new DispatcherService(clubby);
    }

    private DispatcherService(Clubby clubby) {
        this.clubby = clubby;
        this.defaultOpts = clubby.getOptions();
    }


    //-- Hello {{{

    /**
     * A simple ping
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      DispatcherService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void hello(
            DispatcherService.HelloArgs args,
            CmdListener<String> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Dispatcher.Hello",
                args,
                listener,
                String.class,
                opts
                );
    }

    /**
     * A simple ping
     */
    public void hello(
            DispatcherService.HelloArgs args,
            CmdListener<String> listener
            ) {
        hello(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.DispatcherService#hello hello} method.
     */
    public static final class HelloArgs  {


    }


    // }}}

    //-- response {{{

    // }}}

    // }}}

    //-- Help {{{

    /**
     * Return basic info about the server
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      DispatcherService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void help(
            DispatcherService.HelpArgs args,
            CmdListener<DispatcherService.HelpResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Dispatcher.Help",
                args,
                listener,
                DispatcherService.HelpResponse.class,
                opts
                );
    }

    /**
     * Return basic info about the server
     */
    public void help(
            DispatcherService.HelpArgs args,
            CmdListener<DispatcherService.HelpResponse> listener
            ) {
        help(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.DispatcherService#help help} method.
     */
    public static final class HelpArgs  {


    }


    // }}}

    //-- response {{{

    public static final class HelpResponse  {

        /**
         * frontend url; useful for browser based auth
         */
        @JsonProperty("frontend")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String frontend;

        /**
         * server time
         */
        @JsonProperty("time")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Long time;


    }


    // }}}

    // }}}

    //-- RouteStats {{{

    /**
     * Gets channel stats for one or more IDs.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      DispatcherService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void routeStats(
            DispatcherService.RouteStatsArgs args,
            CmdListener<DispatcherService.RouteStatsResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Dispatcher.RouteStats",
                args,
                listener,
                DispatcherService.RouteStatsResponse.class,
                opts
                );
    }

    /**
     * Gets channel stats for one or more IDs.
     */
    public void routeStats(
            DispatcherService.RouteStatsArgs args,
            CmdListener<DispatcherService.RouteStatsResponse> listener
            ) {
        routeStats(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.DispatcherService#routeStats routeStats} method.
     */
    public static final class RouteStatsArgs  {

        /**
         * List of ids to query
         */
        @JsonProperty("ids")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private List<String> ids = new ArrayList<String>();


        /**
         * Add an item to the list of ids to query
         */
        public RouteStatsArgs id(String id) {
            this.ids.add(id);
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.DispatcherService#routeStats routeStats} method.
     */
    public static final class RouteStatsResponse extends HashMap<String, RouteStatsResponseItem> {

        static final long serialVersionUID = 1;


    }


    public static final class RouteStatsResponseItem  {

        /**
         * Channels associated with this route
         */
        @JsonProperty("channels")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public List<String> channels;

        /**
         * When the route was created (timestamp, seconds)
         */
        @JsonProperty("created")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Long created;

        /**
         * When the route was last used (frame sent of received; timestamp, seconds)
         */
        @JsonProperty("lastUsed")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Long lastUsed;

        /**
         * Number of frames sent to the route
         */
        @JsonProperty("numSent")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Long numSent;


    }


    // }}}

    // }}}


    public void setDefaultOptions(ClubbyOptions opts) {
        this.defaultOpts = ClubbyOptions.createFrom(opts);
    }

    public ClubbyOptions getOptions() {
        return ClubbyOptions.createFrom(defaultOpts);
    }
}

