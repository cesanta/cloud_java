
package com.cesanta.cloud;

// GENERATED FILE DO NOT EDIT
// This file is automatically generated with clubbygen.

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import com.cesanta.clubby.lib.Clubby;
import com.cesanta.clubby.lib.ClubbyOptions;
import com.cesanta.clubby.lib.CmdListener;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Auth service performs authentication and authorization of devices and commands. Can only be used by the cloud backend.
 */
public final class AuthService {

    private final Clubby clubby;
    private ClubbyOptions defaultOpts;

    public static AuthService createInstance(Clubby clubby) {
        return new AuthService(clubby);
    }

    private AuthService(Clubby clubby) {
        this.clubby = clubby;
        this.defaultOpts = clubby.getOptions();
    }


    //-- Authenticate {{{

    /**
     * Authenticate returns true if `id` is verified to have valid credentials.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      AuthService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void authenticate(
            AuthService.AuthenticateArgs args,
            CmdListener<AuthService.AuthenticateResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Auth.Authenticate",
                args,
                listener,
                AuthService.AuthenticateResponse.class,
                opts
                );
    }

    /**
     * Authenticate returns true if `id` is verified to have valid credentials.
     */
    public void authenticate(
            AuthService.AuthenticateArgs args,
            CmdListener<AuthService.AuthenticateResponse> listener
            ) {
        authenticate(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.AuthService#authenticate authenticate} method.
     */
    public static final class AuthenticateArgs  {

        /**
         * Credentials presented by the entity. At least one of `psk` or `cert` must be present.
         */
        @JsonProperty("credentials")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private AuthenticateArgsCredential credentials = new AuthenticateArgsCredential();

        /**
         * ID of an entity to authenticate or a username.
         */
        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String id;


        /**
         * Set credentials presented by the entity. At least one of `psk` or `cert` must be present.
         */
        public AuthenticateArgs credentials(AuthenticateArgsCredential credentials) {
            this.credentials = credentials;
            return this;
        }

        /**
         * Set ID of an entity to authenticate or a username.
         */
        public AuthenticateArgs id(String id) {
            this.id = id;
            return this;
        }

    }


    public static final class AuthenticateArgsCredential  {

        @JsonProperty("cert")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String cert;

        @JsonProperty("psk")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String psk;


        /**
         * Set cert
         */
        public AuthenticateArgsCredential cert(String cert) {
            this.cert = cert;
            return this;
        }

        /**
         * Set psk
         */
        public AuthenticateArgsCredential psk(String psk) {
            this.psk = psk;
            return this;
        }

    }


    // }}}

    //-- response {{{

    public static final class AuthenticateResponse  {

        @JsonProperty("success")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Boolean success;


    }


    // }}}

    // }}}

    //-- AuthorizeCommand {{{

    /**
     * AuthorizeCommand returns true if `src` is allowed to send a given command to `dst`.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      AuthService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void authorizeCommand(
            AuthService.AuthorizeCommandArgs args,
            CmdListener<Boolean> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Auth.AuthorizeCommand",
                args,
                listener,
                Boolean.class,
                opts
                );
    }

    /**
     * AuthorizeCommand returns true if `src` is allowed to send a given command to `dst`.
     */
    public void authorizeCommand(
            AuthService.AuthorizeCommandArgs args,
            CmdListener<Boolean> listener
            ) {
        authorizeCommand(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.AuthService#authorizeCommand authorizeCommand} method.
     */
    public static final class AuthorizeCommandArgs  {

        /**
         * Command name.
         */
        @JsonProperty("cmd")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String cmd;

        /**
         * ID of the command recipient.
         */
        @JsonProperty("dst")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String dst;

        /**
         * ID of the command sender.
         */
        @JsonProperty("src")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String src;


        /**
         * Set command name.
         */
        public AuthorizeCommandArgs cmd(String cmd) {
            this.cmd = cmd;
            return this;
        }

        /**
         * Set ID of the command recipient.
         */
        public AuthorizeCommandArgs dst(String dst) {
            this.dst = dst;
            return this;
        }

        /**
         * Set ID of the command sender.
         */
        public AuthorizeCommandArgs src(String src) {
            this.src = src;
            return this;
        }

    }


    // }}}

    //-- response {{{

    // }}}

    // }}}

    //-- GenerateToken {{{

    /**
     * Returns auth token for the given app.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      AuthService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void generateToken(
            AuthService.GenerateTokenArgs args,
            CmdListener<AuthService.GenerateTokenResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Auth.GenerateToken",
                args,
                listener,
                AuthService.GenerateTokenResponse.class,
                opts
                );
    }

    /**
     * Returns auth token for the given app.
     */
    public void generateToken(
            AuthService.GenerateTokenArgs args,
            CmdListener<AuthService.GenerateTokenResponse> listener
            ) {
        generateToken(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.AuthService#generateToken generateToken} method.
     */
    public static final class GenerateTokenArgs  {

        /**
         * Hostname of the app.
         */
        @JsonProperty("host")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String host;


        /**
         * Set hostname of the app.
         */
        public GenerateTokenArgs host(String host) {
            this.host = host;
            return this;
        }

    }


    // }}}

    //-- response {{{

    public static final class GenerateTokenResponse  {

        @JsonProperty("token")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String token;


    }


    // }}}

    // }}}

    //-- GetToken {{{

    /**
     * Returns auth token for the given app.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      AuthService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void getToken(
            AuthService.GetTokenArgs args,
            CmdListener<AuthService.GetTokenResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Auth.GetToken",
                args,
                listener,
                AuthService.GetTokenResponse.class,
                opts
                );
    }

    /**
     * Returns auth token for the given app.
     */
    public void getToken(
            AuthService.GetTokenArgs args,
            CmdListener<AuthService.GetTokenResponse> listener
            ) {
        getToken(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.AuthService#getToken getToken} method.
     */
    public static final class GetTokenArgs  {

        /**
         * Hostname of the app.
         */
        @JsonProperty("host")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String host;


        /**
         * Set hostname of the app.
         */
        public GetTokenArgs host(String host) {
            this.host = host;
            return this;
        }

    }


    // }}}

    //-- response {{{

    public static final class GetTokenResponse  {

        /**
         * `true` if token for the app was generated previously.
         */
        @JsonProperty("exist")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Boolean exist;

        /**
         * Token value. Not present if `exist` is `false`.
         */
        @JsonProperty("token")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String token;


    }


    // }}}

    // }}}

    //-- ListToken {{{

    /**
     * Returns the list of apps for which tokens were generated.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      AuthService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void listToken(
            AuthService.ListTokenArgs args,
            CmdListener<AuthService.ListTokenResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Auth.ListToken",
                args,
                listener,
                AuthService.ListTokenResponse.class,
                opts
                );
    }

    /**
     * Returns the list of apps for which tokens were generated.
     */
    public void listToken(
            AuthService.ListTokenArgs args,
            CmdListener<AuthService.ListTokenResponse> listener
            ) {
        listToken(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.AuthService#listToken listToken} method.
     */
    public static final class ListTokenArgs  {


    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.AuthService#listToken listToken} method.
     */
    public static final class ListTokenResponse extends ArrayList<ListTokenResponseItem> {

        static final long serialVersionUID = 1;


    }


    public static final class ListTokenResponseItem  {

        @JsonProperty("host")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String host;


    }


    // }}}

    // }}}

    //-- RevokeToken {{{

    /**
     * Revokes auth token for the given app.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      AuthService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void revokeToken(
            AuthService.RevokeTokenArgs args,
            CmdListener<AuthService.RevokeTokenResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Auth.RevokeToken",
                args,
                listener,
                AuthService.RevokeTokenResponse.class,
                opts
                );
    }

    /**
     * Revokes auth token for the given app.
     */
    public void revokeToken(
            AuthService.RevokeTokenArgs args,
            CmdListener<AuthService.RevokeTokenResponse> listener
            ) {
        revokeToken(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.AuthService#revokeToken revokeToken} method.
     */
    public static final class RevokeTokenArgs  {

        /**
         * Hostname of the app.
         */
        @JsonProperty("host")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String host;


        /**
         * Set hostname of the app.
         */
        public RevokeTokenArgs host(String host) {
            this.host = host;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.AuthService#revokeToken revokeToken} method.
     */
    public static final class RevokeTokenResponse  {


    }


    // }}}

    // }}}


    public void setDefaultOptions(ClubbyOptions opts) {
        this.defaultOpts = ClubbyOptions.createFrom(opts);
    }

    public ClubbyOptions getOptions() {
        return ClubbyOptions.createFrom(defaultOpts);
    }
}

