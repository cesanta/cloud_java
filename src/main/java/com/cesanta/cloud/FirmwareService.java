// This is a generated file. Not intended for manual editing.
//
// GENERATED FILE DO NOT EDIT
// This file is automatically generated with miot clubbygen.
//
//
// Copyright (c) 2016 Cesanta Software Limited
// All rights reserved
//

package com.cesanta.cloud;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import com.cesanta.clubby.lib.Clubby;
import com.cesanta.clubby.lib.ClubbyOptions;
import com.cesanta.clubby.lib.CmdListener;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Firmware service provides means for managing a set of firmware images.
 */
public final class FirmwareService {

    private final Clubby clubby;
    private ClubbyOptions defaultOpts;

    public static FirmwareService createInstance(Clubby clubby) {
        return new FirmwareService(clubby);
    }

    private FirmwareService(Clubby clubby) {
        this.clubby = clubby;
        this.defaultOpts = clubby.getOptions();
    }


    //-- Create {{{

    /**
     * Registers a new firmware image.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      FirmwareService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void create(
            FirmwareService.CreateArgs args,
            CmdListener<FirmwareService.CreateResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Firmware.Create",
                args,
                listener,
                FirmwareService.CreateResponse.class,
                opts
                );
    }

    /**
     * Registers a new firmware image.
     */
    public void create(
            FirmwareService.CreateArgs args,
            CmdListener<FirmwareService.CreateResponse> listener
            ) {
        create(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.FirmwareService#create create} method.
     */
    public static final class CreateArgs  {

        /**
         * URL of the firmware metadata file. Must be accessible by the devices that will get this firmware. Must be present if zip is not present.
         */
        @JsonProperty("manifest")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String manifest;

        /**
         * Human-readable name for this firmware.
         */
        @JsonProperty("name")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String name;

        /**
         * ID of the project to register firmware for.
         */
        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String projectid;

        /**
         * Firmware version number. Encoded as a string due to limitations of JavaScript.
         */
        @JsonProperty("version")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String version;

        /**
         * URL of the .zip archive suitable for flashing. Must be present if manifest is not present. The zip contains the manifest.
         */
        @JsonProperty("zip")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String zip;


        /**
         * Set URL of the firmware metadata file. Must be accessible by the devices that will get this firmware. Must be present if zip is not present.
         */
        public CreateArgs manifest(String manifest) {
            this.manifest = manifest;
            return this;
        }

        /**
         * Set human-readable name for this firmware.
         */
        public CreateArgs name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Set ID of the project to register firmware for.
         */
        public CreateArgs projectid(String projectid) {
            this.projectid = projectid;
            return this;
        }

        /**
         * Set firmware version number. Encoded as a string due to limitations of JavaScript.
         */
        public CreateArgs version(String version) {
            this.version = version;
            return this;
        }

        /**
         * Set URL of the .zip archive suitable for flashing. Must be present if manifest is not present. The zip contains the manifest.
         */
        public CreateArgs zip(String zip) {
            this.zip = zip;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.FirmwareService#create create} method.
     */
    public static final class CreateResponse  {


    }


    // }}}

    // }}}

    //-- Delete {{{

    /**
     * Deletes the firmware image from the database.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      FirmwareService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void delete(
            FirmwareService.DeleteArgs args,
            CmdListener<FirmwareService.DeleteResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Firmware.Delete",
                args,
                listener,
                FirmwareService.DeleteResponse.class,
                opts
                );
    }

    /**
     * Deletes the firmware image from the database.
     */
    public void delete(
            FirmwareService.DeleteArgs args,
            CmdListener<FirmwareService.DeleteResponse> listener
            ) {
        delete(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.FirmwareService#delete delete} method.
     */
    public static final class DeleteArgs  {

        /**
         * ID of the firmware image.
         */
        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String id;

        /**
         * ID of the project.
         */
        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String projectid;


        /**
         * Set ID of the firmware image.
         */
        public DeleteArgs id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Set ID of the project.
         */
        public DeleteArgs projectid(String projectid) {
            this.projectid = projectid;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.FirmwareService#delete delete} method.
     */
    public static final class DeleteResponse  {


    }


    // }}}

    // }}}

    //-- Get {{{

    /**
     * Returns information about a given firmware.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      FirmwareService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void get(
            FirmwareService.GetArgs args,
            CmdListener<FirmwareService.GetResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Firmware.Get",
                args,
                listener,
                FirmwareService.GetResponse.class,
                opts
                );
    }

    /**
     * Returns information about a given firmware.
     */
    public void get(
            FirmwareService.GetArgs args,
            CmdListener<FirmwareService.GetResponse> listener
            ) {
        get(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.FirmwareService#get get} method.
     */
    public static final class GetArgs  {

        /**
         * ID of the firmware image. IDs are assigned by the backend, use `List` command to get the it initially.
         */
        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String id;

        /**
         * ID of the project.
         */
        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String projectid;


        /**
         * Set ID of the firmware image. IDs are assigned by the backend, use `List` command to get the it initially.
         */
        public GetArgs id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Set ID of the project.
         */
        public GetArgs projectid(String projectid) {
            this.projectid = projectid;
            return this;
        }

    }


    // }}}

    //-- response {{{

    public static final class GetResponse  {

        @JsonProperty("created")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String created;

        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String id;

        @JsonProperty("manifest")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String manifest;

        @JsonProperty("name")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String name;

        @JsonProperty("version")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String version;

        @JsonProperty("zip")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String zip;


    }


    // }}}

    // }}}

    //-- List {{{

    /**
     * Returns a list of firmware images registered in a given project.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      FirmwareService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void list(
            FirmwareService.ListArgs args,
            CmdListener<FirmwareService.ListResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Firmware.List",
                args,
                listener,
                FirmwareService.ListResponse.class,
                opts
                );
    }

    /**
     * Returns a list of firmware images registered in a given project.
     */
    public void list(
            FirmwareService.ListArgs args,
            CmdListener<FirmwareService.ListResponse> listener
            ) {
        list(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.FirmwareService#list list} method.
     */
    public static final class ListArgs  {

        /**
         * ID of the project.
         */
        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String projectid;


        /**
         * Set ID of the project.
         */
        public ListArgs projectid(String projectid) {
            this.projectid = projectid;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.FirmwareService#list list} method.
     */
    public static final class ListResponse extends ArrayList<ListResponseItem> {

        static final long serialVersionUID = 1;


    }


    public static final class ListResponseItem  {

        @JsonProperty("created")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String created;

        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String id;

        @JsonProperty("manifest")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String manifest;

        @JsonProperty("name")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String name;

        @JsonProperty("version")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String version;

        @JsonProperty("zip")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String zip;


    }


    // }}}

    // }}}

    //-- Update {{{

    /**
     * Allows to change the name of the firmware image.
     *
     * @param opts
     *      Options instance which will override current default options. If
     *      there is a need to override defaults, use {@link
     *      FirmwareService#getOptions() getOptions()} to get current defaults, and then
     *      modify received options object in some way.
     */
    public void update(
            FirmwareService.UpdateArgs args,
            CmdListener<FirmwareService.UpdateResponse> listener,
            ClubbyOptions opts
            ) {
        clubby.callBackend(
                "/v1/Firmware.Update",
                args,
                listener,
                FirmwareService.UpdateResponse.class,
                opts
                );
    }

    /**
     * Allows to change the name of the firmware image.
     */
    public void update(
            FirmwareService.UpdateArgs args,
            CmdListener<FirmwareService.UpdateResponse> listener
            ) {
        update(args, listener, defaultOpts);
    }

    //-- args {{{

    /**
     * Arguments for the {@link com.cesanta.cloud.FirmwareService#update update} method.
     */
    public static final class UpdateArgs  {

        /**
         * ID of the firmware image.
         */
        @JsonProperty("id")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String id;

        /**
         * New name for the firmware image.
         */
        @JsonProperty("name")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String name;

        /**
         * ID of the project.
         */
        @JsonProperty("projectid")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String projectid;


        /**
         * Set ID of the firmware image.
         */
        public UpdateArgs id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Set new name for the firmware image.
         */
        public UpdateArgs name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Set ID of the project.
         */
        public UpdateArgs projectid(String projectid) {
            this.projectid = projectid;
            return this;
        }

    }


    // }}}

    //-- response {{{

    /**
     * Response of the {@link com.cesanta.cloud.FirmwareService#update update} method.
     */
    public static final class UpdateResponse  {


    }


    // }}}

    // }}}


    public void setDefaultOptions(ClubbyOptions opts) {
        this.defaultOpts = ClubbyOptions.createFrom(opts);
    }

    public ClubbyOptions getOptions() {
        return ClubbyOptions.createFrom(defaultOpts);
    }
}

